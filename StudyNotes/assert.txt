在没完善一个程序之前，我们不知道程序在哪里会出错，与其让它在运行最崩溃，不如在出现错误条件时就崩溃，这时候就需要assert断言的帮助。
可以在assert后面跟上任意判断条件，如果断言失败则会抛出异常。

"Assert statements are a convenient way to insert debugging assertions into a program".

python assert断言的作用
python assert断言是声明其布尔值必须为真的判定，如果发生异常就说明表达示为假。可以理解assert断言语句为raise-if-not，用来测试表示式，其返回值为假，就会触发异常

一般的用法是：
assert condition
用来让程序测试这个condition，如果condition为false，那么raise一个AssertionError出来。逻辑上等同于：
if not condition:
    raise AssertionError()
比如如下的例子：
>>> assert 1==1
>>> assert 1==0
Traceback (most recent call last):
  File "<pyshell#1>", line 1, in <module>
    assert 1==0
AssertionError
>>> assert True
>>> assert False
Traceback (most recent call last):
  File "<pyshell#3>", line 1, in <module>
    assert False
AssertionError
>>> assert 3<2
Traceback (most recent call last):
  File "<pyshell#4>", line 1, in <module>
    assert 3<2
AssertionError

>>> assert isinstance('Hello', str)
>>> assert isinstance('Hello', int)
Traceback (most recent call last):
  File "<input>", line 1, in <module>
AssertionError




assert expression等同于如下代码：
if _debug_:
    if not expression:
        raise AssertionError

assert expression1, expression2等同于如下代码：
if _debug_:
    if not expression1:
        raise AssertionError(expression2)
以上两段代码中的_debug_和AssertionError都代表的是Python中内建的变量。当前Python中_debug_在普通情况下均为True。只有当程序执行在优化模式下为False
（优化模式为命令行的-O选项）。所以当程序以优化模式编译后，assert声明并不会被执行。需要注意的是，我们并不需要手动在错误信息中加入assert后被检测的expression的代码，
这些代码会自动显示在出错的堆栈信息中。

另外，给_debug_赋值是非法的。_debug_的值在程序的编译器开始工作时就已经确定了。

Python中一个非空元组的布尔值是True。		
assert(False)。当()出现在assert后面时，Python编译器会认为assert后面的输入是一个元组。而一个非空元组的布尔值总为True




>>> s = "nothin is impossible."
>>> key = "nothing"
>>> assert key in s, "key: '{}' is not in Target: '{}'".format(key, s)
Traceback (most recent call last):
  File "<pyshell#25>", line 1, in <module>
    assert key in s, "key: '{}' is not in Target: '{}'".format(key, s)
AssertionError: key: 'nothing' is not in Target: 'nothin is impossible.'
>>> 




Python自带的unittest单元测试框架就有了自己的断言方法self.assertXXX()，而且不推荐使用assert XXX语句。
>>> import unittest
>>> class TestStringMethods(unittest.TestCase):
	def test_upper(self):
		self.assertEqual('foo'.upper(), 'FoO')

		
>>> if __name__ == '__main__':
	unittest.main()

	
F
======================================================================
FAIL: test_upper (__main__.TestStringMethods)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "<pyshell#29>", line 3, in test_upper
AssertionError: 'FOO' != 'FoO'
- FOO
?  ^
+ FoO
?  ^


----------------------------------------------------------------------
Ran 1 test in 0.035s

FAILED (failures=1)
>>> 



assertpy 这个包，它异常强大而且好评如潮。
>>> def test_something():
	assert_that(1 + 2).is_equal_to(3)
	assert_that('foobar').is_length(6).starts_with('foO').ends_with('bar')
	assert_that(['a','b','c']).contains('a').does_not_contain('x')

	
>>> test_something()
Traceback (most recent call last):
  File "<pyshell#29>", line 1, in <module>
    test_something()
  File "<pyshell#28>", line 3, in test_something
    assert_that('foobar').is_length(6).starts_with('foO').ends_with('bar')
  File "C:\Users\xzywr\AppData\Local\Programs\Python\Python36\lib\site-packages\assertpy\assertpy.py", line 537, in starts_with
    self._err('Expected <%s> to start with <%s>, but did not.' % (self.val, prefix))
  File "C:\Users\xzywr\AppData\Local\Programs\Python\Python36\lib\site-packages\assertpy\assertpy.py", line 970, in _err
    raise AssertionError(out)
AssertionError: Expected <foobar> to start with <foO>, but did not.
>>> def test_something():
	assert_that(1 + 2).is_equal_to(3)
	assert_that('foobar').is_length(6).starts_with('foo').ends_with('bar')
	assert_that(['a','b','c']).contains('y').does_not_contain('x')

	
>>> test_something()
Traceback (most recent call last):
  File "<pyshell#32>", line 1, in <module>
    test_something()
  File "<pyshell#31>", line 4, in test_something
    assert_that(['a','b','c']).contains('y').does_not_contain('x')
  File "C:\Users\xzywr\AppData\Local\Programs\Python\Python36\lib\site-packages\assertpy\assertpy.py", line 253, in contains
    self._err('Expected <%s> to contain item <%s>, but did not.' % (self.val, items[0]))
  File "C:\Users\xzywr\AppData\Local\Programs\Python\Python36\lib\site-packages\assertpy\assertpy.py", line 970, in _err
    raise AssertionError(out)
AssertionError: Expected <['a', 'b', 'c']> to contain item <y>, but did not.
>>> 

从它的github 主页 文档上你会发现它支持了几乎你能想到的所有测试场景，包括但不限于以下列表。
Strings
Numbers
Lists
Tuples
Dicts
Sets
Booleans
Dates
Files
Objects
而且它的断言信息简洁明了，不多不少。
Expected <foo> to be of length <4>, but was <3>.
Expected <foo> to be empty string, but was not.
Expected <False>, but was not.
Expected <foo> to contain only digits, but did not.
Expected <123> to contain only alphabetic chars, but did not.
Expected <foo> to contain only uppercase chars, but did not.
Expected <FOO> to contain only lowercase chars, but did not.
Expected <foo> to be equal to <bar>, but was not.
Expected <foo> to be not equal to <foo>, but was.
Expected <foo> to be case-insensitive equal to <BAR>, but was not.

断言在软件系统中有非常重要的作用，写的好可以让你的系统更稳定，也可以让你有更多真正面对对象的时间，而不是在调试代码。
Python中默认的断言语句其实还有一个作用，如果你写了一个类型相关的断言，IDE会把这个对象当成这种类型，这时候智能提示就有如神助。
要不要把内置的断言语句换成可读性更好功能更强大的第三方断言，完全取决于实际情况。比如你真的需要验证某个东西并且很关心验证结果，那么必须不能用简单的assert；
如果你只是担心某个点可能有坑或者让IDE认识某个对象，用内置的assert既简单又方便。
所以说，项目经验还是蛮重要的。




很多人用assert作为一个很快和容易的方法来在参数错误的时候抛出异常。但这样做是错的，非常错误，有两个原因。

首先AssertError不是在测试参数时应该抛出的错误。你不应该像这样写代码：
if not isinstance(x, int):
    raise AssertionError("not an int")
你应该抛出TypeError的错误，assert会抛出错误的异常。

但是，更危险的是，有一个关于assert的困扰：它可以被编译好然后从来不执行，如果你用 –O 或 –oo 选项运行Python，结果不保证assert表达式会运行到。当适当的使用assert时，
这是未来，但是当assert不恰当的使用时，它会让代码用-O执行时出错。

那什么时候应该使用assert？没有特定的规则，断言应该用于：

防御型的编程
运行时检查程序逻辑
检查约定
程序常量
检查文档

（在测试代码的时候使用断言也是可接受的，是一种很方便的单元测试方法，你接受这些测试在用-O标志运行时不会做任何事。
我有时在代码里使用assert False来标记没有写完的代码分支，我希望这些代码运行失败。尽管抛出NotImplementedError可能会更好。）

关于断言的意见有很多，因为它能确保代码的正确性。如果你确定代码是正确的，那么就没有用断言的必要了，因为他们从来不会运行失败，你可以直接移除这些断言。
如果你确定检查会失败，那么如果你不用断言，代码就会通过编译并忽略你的检查。

在以上两种情况下会很有意思，当你比较肯定代码但是不是绝对肯定时。可能你会错过一些非常古怪的情况。在这个情况下，
额外的运行时检查能帮你确保任何错误都会尽早地被捕捉到。

另一个好的使用断言的方式是检查程序的不变量。一个不变量是一些你需要依赖它为真的情况，除非一个bug导致它为假。如果有bug，最好能够尽早发现，所以我们为它进行一个测试，
但是又不想减慢代码运行速度。所以就用断言，因为它能在开发时打开，在产品阶段关闭。

一个非变量的例子可能是，如果你的函数希望在它开始时有数据库的连接，并且承诺在它返回的时候仍然保持连接，这就是函数的不变量：
def some_function(arg):
    assert not DB.closed()
    ... # code goes here
    assert not DB.closed()
    return result
	
断言本身就是很好的注释，胜过你直接写注释：

# when we reach here, we know that n > 2

你可以通过添加断言来确保它：

assert n > 2

断言也是一种防御型编程。你不是让你的代码防御现在的错误，而是防止在代码修改后引发的错误。理想情况下，单元测试可以完成这样的工作，可是需要面对的现实是，
它们通常是没有完成的。人们可能在提交代码前会忘了运行测试代码。有一个内部检查是另一个阻挡错误的防线，尤其是那些不明显的错误，却导致了代码出问题并且返回错误的结果。

假如你有一些if…elif 的语句块，你知道在这之前一些需要有一些值：
# target is expected to be one of x, y, or z, and nothing else.
if target == x:
    run_x_code()
elif target == y:
    run_y_code()
else:
    run_z_code()
假设代码现在是完全正确的。但它会一直是正确的吗？依赖的修改，代码的修改。如果依赖修改成 target = w 会发生什么，会关系到run_w_code函数吗？如果我们改变了代码，
但没有修改这里的代码，可能会导致错误的调用 run_z_code 函数并引发错误。用防御型的方法来写代码会很好，它能让代码运行正确，或者立马执行错误，
即使你在未来对它进行了修改。

在代码开头的注释很好的一步，但是人们经常懒得读或者更新注释。一旦发生这种情况，注释会变得没用。但有了断言，我可以同时对代码块的假设书写文档，
并且在它们违反的时候触发一个干净的错误
assert target in (x, y, z)
if target == x:
    run_x_code()
elif target == y:
    run_y_code()
else:
    assert target == z
    run_z_code()
这样，断言是一种防御型编程，同时也是一种文档。我想到一个更好的方案：
if target == x:
    run_x_code()
elif target == y:
    run_y_code()
elif target == z:
    run_z_code()
else:
    # This can never happen. But just in case it does...
    raise RuntimeError("an unexpected error occurred")
按约定进行设计是断言的另一个好的用途。我们想象函数与调用者之间有个约定，比如下面的：

“如果你传给我一个非空字符串，我保证传会字符串的第一个字母并将其大写。”

如果约定被函数或调用这破坏，代码就会出问题。我们说函数有一些前置条件和后置条件，所以函数就会这么写：
def first_upper(astring):
    assert isinstance(astring, str) and len(astring) > 0
    result = astring[0].upper()
    assert isinstance(result, str) and len(result) == 1
    assert result == result.upper()
    return result
按约定设计的目标是为了正确的编程，前置条件和后置条件是需要保持的。这是断言的典型应用场景，因为一旦我们发布了没有问题的代码到产品中，程序会是正确的，并且我们能安全的移除检查。

下面是我建议的不要用断言的场景：

不要用它测试用户提供的数据
不要用断言来检查你觉得在你的程序的常规使用时会出错的地方。断言是用来检查非常罕见的问题。你的用户不应该看到任何断言错误，如果他们看到了，这是一个bug，修复它。
有的情况下，不用断言是因为它比精确的检查要短，它不应该是懒码农的偷懒方式。
不要用它来检查对公共库的输入参数，因为它不能控制调用者，所以不能保证调用者会不会打破双方的约定。
不要为你觉得可以恢复的错误用断言。换句话说，不用改在产品代码里捕捉到断言错误。
不要用太多断言以至于让代码很晦涩。	
