在python中有一个匿名函数lambda

匿名函数顾名思义就是指：是指一类无需定义标识符（函数名）的函数或子程序。最早引入匿名函数的是LISP语言，LISP是最早的函数编程式语言，
我们使用的Vim的插件大部分都是使用LISP语言进行编写的，后来又派生出Emacs Lisp，Emacs的扩展插件就是使用Lisp编写的。

>>> g = lambda x:x*x
>>> print(g(4))
16
>>> print((lambda x:x*x)(4))
16
>>>

lambda 函数可以接收任意多个参数 (包括可选参数) 并且返回单个表达式的值。lambda 函数不能包含命令，包含的表达式不能超过一个。不要试图向 lambda 函数中塞入太多的东西；
如果你需要更复杂的东西，应该定义一个普通函数，然后想让它多长就多长。
lambda 函数是一种风格问题。不一定非要使用它们；任何能够使用它们的地方，都可以定义一个单独的普通函数来进行替换。我将它们用在需要封装特殊的、非重用代码上，
避免令我的代码充斥着大量单行函数。

lambda语句中，冒号前是参数，可以有多个，用逗号隔开，冒号右边的为表达式。其实lambda返回值是一个函数的地址，也就是函数对象。
>>> g=lambda x:x*x
>>> print(g)
<function <lambda> at 0x00000229ED333E18>
>>>

>>> from functools import reduce
>>> print(reduce(lambda x,y:x*y, range(1,5)))
24
>>>

>>> def make_incrementor(n): return lambda x:x + n
...
>>> f=make_incrementor(2)
>>> g=make_incrementor(6)
>>> print(f(42),g(42))
44 48
>>> print(make_incrementor(22)(33))
55
>>>




lambda需要两个参数,第一个是一个处理函数,第二个是一个序列(list,tuple,dict)
map()
将序列中的元素通过处理函数处理后返回一个新的列表
filter()
将序列中的元素通过函数过滤后返回一个新的列表
reduce()
将序列中的元素通过一个二元函数处理返回一个结果

a=lambda x:x+1
>>> type(a)
<class 'function'>

>>> from functools import reduce
>>> li=[1,2,3,4,5]

>>> map(lambda x:x+1,li)
<map object at 0x00000229ED4FDB70>
>>> list(map(lambda x:x+1,li))
[2, 3, 4, 5, 6]
>>> print([x+1 for x in li])
[2, 3, 4, 5, 6]

>>> list(filter(lambda x:x%2 == 0,li))
[2, 4]
>>> print([x for x in li if x % 2 == 0])
[2, 4]

>>> reduce(lambda x,y:x*y, li)
120
>>>




>>> fs=[(lambda n:i+n) for i in range(10)]
>>> fs[3](4)
13
>>> fs[4](4)
13
>>> fs[5](4)
13
>>>
lambda中的i使用的是匿名函数外的全局变量
>>> fs=[(lambda n,i=i:i+n) for i in range(10)]
>>> fs[3](4)
7
>>> fs[4](4)
8
>>> fs[5](4)
9
>>>




def square_root(x): return math.sqrt(x)
square_root = lambda x: math.sqrt(x)

>>> out=lambda *x: sys.stdout.write("".join(map(str,x)))

Python支持链式赋值

1、赋值语句不能在lambda中使用。在Python中，赋值语句不返回任何东西，甚至没有None（null）。
2、如数学运算，字符串操作，列表解析等都是一个lambda。
3、函数调用是表达式。可以在lambda中放置函数调用，并将参数传递给该函数。这样就在一个新的匿名函数中封装了原函数调用（参数其他内容）。
4、在Python3，print成了一个函数，所以在Python3+，print（…）可以在lambda中使用。
5、即使函数是返回None，就像在Python3 print函数，可以在一个lambda中使用。
6、[条件表达式]是表达式（而不是仅仅是一个语法不同的if / else语句）。它们返回一个值，并且可以在一个lambda使用。

lambda: a if some_condition() else b
lambda x: ‘big’ if x > 100 else ‘small’

在某种意义上，return语句隐含在lambda中。lambda规范必须包含只有一个表达式，表达式必须返回一个值，由lambda创建一个匿名函数隐式地返回表达式的返回值。这非常有意义。

lambda是一个用来构造回调的工具




Lambda函数，是一个匿名函数，创建语法：

 lambda parameters:express

parameters：可选，如果提供，通常是逗号分隔的变量表达式形式，即位置参数。
expression：不能包含分支或循环（但允许条件表达式），也不能包含return（或yield）函数。如果为元组，则应用圆括号将其包含起来。
调用lambda函数，返回的结果是对表达式计算产生的结果。

>>> s=lambda x:"yes" if x==1 else "no"
>>> s(0)
'no'
>>> s(1)
'yes'
>>>

使用sorted()方法和list.sort()方法进行排序
elements=[(2,12,"A"),(1,11,"N"),(1,3,"L"),(2,4,"B")]
>>> sorted(elements)
[(1, 3, 'L'), (1, 11, 'N'), (2, 4, 'B'), (2, 12, 'A')]
 
根据elements每个元组后两项进行排序，e表示列表中每个三元组元素
在表达式是元组，且lambda为一个函数的参数时，lambda表达式的圆括号是必需的
>>> elements.sort(key=lambda e:(e[1],e[2]))
>>> elements
[(1, 3, 'L'), (2, 4, 'B'), (1, 11, 'N'), (2, 12, 'A')]
 
分片方式得到同样的效果
>>> elements.sort(key=lambda e:e[1:3])
>>> elements
[(1, 3, 'L'), (2, 4, 'B'), (1, 11, 'N'), (2, 12, 'A')]
 
 >>> elements.sort(key=lambda e:(e[2].lower(),e[1]))
[(2, 12, 'A'), (2, 4, 'B'), (1, 3, 'L'), (1, 11, 'N')]

以下两种方法等价，都可以通过调用area(5,3)，结果相同
>>> area=lambda b,h:0.5*b*h
>>> def area(b,h):
        return 0.5*b*h
 
默认字典使用，存取不不在的键时，创建一个新项，键为这个不存在的键，值为lambda函数的值
>>> import collections
>>> one_dict = collections.defaultdict(lambda:-1)
>>> two_dict = collections.defaultdict(lambda:(0,0))
>>> three_dict = collections.defaultdict(lambda:"No message avaliable")




lambda只是一个表达式，函数体比def简单很多。
lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。
lambda表达式是起到一个函数速写的作用。允许在代码内嵌入一个函数的定义。

>>> f=lambda x,y,z:x+y+x
>>> f(1,2,3)
4
>>> f=lambda x,y,z:x+y+z
>>> f(1,2,3)
6
>>>

>>> n=5
>>> reduce(lambda x,y:x*y, range(1,n+1))
120
>>>

lambda表达式也可以用在def函数中。
>>> def action(x):
...     return lambda y:x+y
...
>>> a=action(2)
>>> a(22)
24
>>>

>>> b=lambda x:lambda y: x+y
>>> a=b(3)
>>> a(2)
5
>>> (b(2))(2)
4
>>>